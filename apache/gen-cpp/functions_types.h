/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef functions_TYPES_H
#define functions_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace functions {

class AddRequest;

class User;

typedef struct _AddRequest__isset {
  _AddRequest__isset() : num1(false), num2(false), num3(false), num4(false), num5(false), num6(false), num7(false), num8(false) {}
  bool num1 :1;
  bool num2 :1;
  bool num3 :1;
  bool num4 :1;
  bool num5 :1;
  bool num6 :1;
  bool num7 :1;
  bool num8 :1;
} _AddRequest__isset;

class AddRequest : public virtual ::apache::thrift::TBase {
 public:

  AddRequest(const AddRequest&) noexcept;
  AddRequest& operator=(const AddRequest&) noexcept;
  AddRequest() noexcept
             : num1(0),
               num2(0),
               num3(0),
               num4(0),
               num5(0),
               num6(0),
               num7(0),
               num8(0) {
  }

  virtual ~AddRequest() noexcept;
  int64_t num1;
  int64_t num2;
  int64_t num3;
  int64_t num4;
  int64_t num5;
  int64_t num6;
  int64_t num7;
  int64_t num8;

  _AddRequest__isset __isset;

  void __set_num1(const int64_t val);

  void __set_num2(const int64_t val);

  void __set_num3(const int64_t val);

  void __set_num4(const int64_t val);

  void __set_num5(const int64_t val);

  void __set_num6(const int64_t val);

  void __set_num7(const int64_t val);

  void __set_num8(const int64_t val);

  bool operator == (const AddRequest & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    if (!(num3 == rhs.num3))
      return false;
    if (!(num4 == rhs.num4))
      return false;
    if (!(num5 == rhs.num5))
      return false;
    if (!(num6 == rhs.num6))
      return false;
    if (!(num7 == rhs.num7))
      return false;
    if (!(num8 == rhs.num8))
      return false;
    return true;
  }
  bool operator != (const AddRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddRequest &a, AddRequest &b);

std::ostream& operator<<(std::ostream& out, const AddRequest& obj);

typedef struct _User__isset {
  _User__isset() : id(false), name(false), age(false), email(false) {}
  bool id :1;
  bool name :1;
  bool age :1;
  bool email :1;
} _User__isset;

class User : public virtual ::apache::thrift::TBase {
 public:

  User(const User&);
  User& operator=(const User&);
  User() noexcept
       : id(0),
         name(),
         age(),
         email() {
  }

  virtual ~User() noexcept;
  int32_t id;
  std::string name;
  std::string age;
  std::string email;

  _User__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_age(const std::string& val);

  void __set_email(const std::string& val);

  bool operator == (const User & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(age == rhs.age))
      return false;
    if (!(email == rhs.email))
      return false;
    return true;
  }
  bool operator != (const User &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(User &a, User &b);

std::ostream& operator<<(std::ostream& out, const User& obj);

} // namespace

#endif
