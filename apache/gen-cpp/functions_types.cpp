/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "functions_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace functions {


AddRequest::~AddRequest() noexcept {
}


void AddRequest::__set_num1(const int64_t val) {
  this->num1 = val;
}

void AddRequest::__set_num2(const int64_t val) {
  this->num2 = val;
}

void AddRequest::__set_num3(const int64_t val) {
  this->num3 = val;
}

void AddRequest::__set_num4(const int64_t val) {
  this->num4 = val;
}

void AddRequest::__set_num5(const int64_t val) {
  this->num5 = val;
}

void AddRequest::__set_num6(const int64_t val) {
  this->num6 = val;
}

void AddRequest::__set_num7(const int64_t val) {
  this->num7 = val;
}

void AddRequest::__set_num8(const int64_t val) {
  this->num8 = val;
}
std::ostream& operator<<(std::ostream& out, const AddRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AddRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num1);
          this->__isset.num1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num2);
          this->__isset.num2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num3);
          this->__isset.num3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num4);
          this->__isset.num4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num5);
          this->__isset.num5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num6);
          this->__isset.num6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num7);
          this->__isset.num7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num8);
          this->__isset.num8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddRequest");

  xfer += oprot->writeFieldBegin("num1", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->num1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num2", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->num2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num3", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->num3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num4", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->num4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num5", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->num5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num6", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->num6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num7", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->num7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num8", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->num8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddRequest &a, AddRequest &b) {
  using ::std::swap;
  swap(a.num1, b.num1);
  swap(a.num2, b.num2);
  swap(a.num3, b.num3);
  swap(a.num4, b.num4);
  swap(a.num5, b.num5);
  swap(a.num6, b.num6);
  swap(a.num7, b.num7);
  swap(a.num8, b.num8);
  swap(a.__isset, b.__isset);
}

AddRequest::AddRequest(const AddRequest& other0) noexcept {
  num1 = other0.num1;
  num2 = other0.num2;
  num3 = other0.num3;
  num4 = other0.num4;
  num5 = other0.num5;
  num6 = other0.num6;
  num7 = other0.num7;
  num8 = other0.num8;
  __isset = other0.__isset;
}
AddRequest& AddRequest::operator=(const AddRequest& other1) noexcept {
  num1 = other1.num1;
  num2 = other1.num2;
  num3 = other1.num3;
  num4 = other1.num4;
  num5 = other1.num5;
  num6 = other1.num6;
  num7 = other1.num7;
  num8 = other1.num8;
  __isset = other1.__isset;
  return *this;
}
void AddRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddRequest(";
  out << "num1=" << to_string(num1);
  out << ", " << "num2=" << to_string(num2);
  out << ", " << "num3=" << to_string(num3);
  out << ", " << "num4=" << to_string(num4);
  out << ", " << "num5=" << to_string(num5);
  out << ", " << "num6=" << to_string(num6);
  out << ", " << "num7=" << to_string(num7);
  out << ", " << "num8=" << to_string(num8);
  out << ")";
}


User::~User() noexcept {
}


void User::__set_id(const int32_t val) {
  this->id = val;
}

void User::__set_name(const std::string& val) {
  this->name = val;
}

void User::__set_age(const std::string& val) {
  this->age = val;
}

void User::__set_email(const std::string& val) {
  this->email = val;
}
std::ostream& operator<<(std::ostream& out, const User& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->age);
          this->__isset.age = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("age", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->age);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User &a, User &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.age, b.age);
  swap(a.email, b.email);
  swap(a.__isset, b.__isset);
}

User::User(const User& other2) {
  id = other2.id;
  name = other2.name;
  age = other2.age;
  email = other2.email;
  __isset = other2.__isset;
}
User& User::operator=(const User& other3) {
  id = other3.id;
  name = other3.name;
  age = other3.age;
  email = other3.email;
  __isset = other3.__isset;
  return *this;
}
void User::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "age=" << to_string(age);
  out << ", " << "email=" << to_string(email);
  out << ")";
}

} // namespace
