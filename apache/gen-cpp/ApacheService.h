/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ApacheService_H
#define ApacheService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "functions_types.h"

namespace functions {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ApacheServiceIf {
 public:
  virtual ~ApacheServiceIf() {}
  virtual int64_t add(const AddRequest& request) = 0;
  virtual void printrandom() = 0;
  virtual int64_t fibonacci(const int64_t input) = 0;
  virtual void onlydigits(std::string& _return, const std::string& input) = 0;
  virtual void getuser(User& _return, const int32_t id) = 0;
};

class ApacheServiceIfFactory {
 public:
  typedef ApacheServiceIf Handler;

  virtual ~ApacheServiceIfFactory() {}

  virtual ApacheServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ApacheServiceIf* /* handler */) = 0;
  };

class ApacheServiceIfSingletonFactory : virtual public ApacheServiceIfFactory {
 public:
  ApacheServiceIfSingletonFactory(const ::std::shared_ptr<ApacheServiceIf>& iface) : iface_(iface) {}
  virtual ~ApacheServiceIfSingletonFactory() {}

  virtual ApacheServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(ApacheServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<ApacheServiceIf> iface_;
};

class ApacheServiceNull : virtual public ApacheServiceIf {
 public:
  virtual ~ApacheServiceNull() {}
  int64_t add(const AddRequest& /* request */) override {
    int64_t _return = 0;
    return _return;
  }
  void printrandom() override {
    return;
  }
  int64_t fibonacci(const int64_t /* input */) override {
    int64_t _return = 0;
    return _return;
  }
  void onlydigits(std::string& /* _return */, const std::string& /* input */) override {
    return;
  }
  void getuser(User& /* _return */, const int32_t /* id */) override {
    return;
  }
};

typedef struct _ApacheService_add_args__isset {
  _ApacheService_add_args__isset() : request(false) {}
  bool request :1;
} _ApacheService_add_args__isset;

class ApacheService_add_args {
 public:

  ApacheService_add_args(const ApacheService_add_args&) noexcept;
  ApacheService_add_args& operator=(const ApacheService_add_args&) noexcept;
  ApacheService_add_args() noexcept {
  }

  virtual ~ApacheService_add_args() noexcept;
  AddRequest request;

  _ApacheService_add_args__isset __isset;

  void __set_request(const AddRequest& val);

  bool operator == (const ApacheService_add_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ApacheService_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApacheService_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApacheService_add_pargs {
 public:


  virtual ~ApacheService_add_pargs() noexcept;
  const AddRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApacheService_add_result__isset {
  _ApacheService_add_result__isset() : success(false) {}
  bool success :1;
} _ApacheService_add_result__isset;

class ApacheService_add_result {
 public:

  ApacheService_add_result(const ApacheService_add_result&) noexcept;
  ApacheService_add_result& operator=(const ApacheService_add_result&) noexcept;
  ApacheService_add_result() noexcept
                           : success(0) {
  }

  virtual ~ApacheService_add_result() noexcept;
  int64_t success;

  _ApacheService_add_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const ApacheService_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ApacheService_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApacheService_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApacheService_add_presult__isset {
  _ApacheService_add_presult__isset() : success(false) {}
  bool success :1;
} _ApacheService_add_presult__isset;

class ApacheService_add_presult {
 public:


  virtual ~ApacheService_add_presult() noexcept;
  int64_t* success;

  _ApacheService_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ApacheService_printrandom_args {
 public:

  ApacheService_printrandom_args(const ApacheService_printrandom_args&) noexcept;
  ApacheService_printrandom_args& operator=(const ApacheService_printrandom_args&) noexcept;
  ApacheService_printrandom_args() noexcept {
  }

  virtual ~ApacheService_printrandom_args() noexcept;

  bool operator == (const ApacheService_printrandom_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ApacheService_printrandom_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApacheService_printrandom_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApacheService_printrandom_pargs {
 public:


  virtual ~ApacheService_printrandom_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApacheService_printrandom_result {
 public:

  ApacheService_printrandom_result(const ApacheService_printrandom_result&) noexcept;
  ApacheService_printrandom_result& operator=(const ApacheService_printrandom_result&) noexcept;
  ApacheService_printrandom_result() noexcept {
  }

  virtual ~ApacheService_printrandom_result() noexcept;

  bool operator == (const ApacheService_printrandom_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ApacheService_printrandom_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApacheService_printrandom_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApacheService_printrandom_presult {
 public:


  virtual ~ApacheService_printrandom_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApacheService_fibonacci_args__isset {
  _ApacheService_fibonacci_args__isset() : input(false) {}
  bool input :1;
} _ApacheService_fibonacci_args__isset;

class ApacheService_fibonacci_args {
 public:

  ApacheService_fibonacci_args(const ApacheService_fibonacci_args&) noexcept;
  ApacheService_fibonacci_args& operator=(const ApacheService_fibonacci_args&) noexcept;
  ApacheService_fibonacci_args() noexcept
                               : input(0) {
  }

  virtual ~ApacheService_fibonacci_args() noexcept;
  int64_t input;

  _ApacheService_fibonacci_args__isset __isset;

  void __set_input(const int64_t val);

  bool operator == (const ApacheService_fibonacci_args & rhs) const
  {
    if (!(input == rhs.input))
      return false;
    return true;
  }
  bool operator != (const ApacheService_fibonacci_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApacheService_fibonacci_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApacheService_fibonacci_pargs {
 public:


  virtual ~ApacheService_fibonacci_pargs() noexcept;
  const int64_t* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApacheService_fibonacci_result__isset {
  _ApacheService_fibonacci_result__isset() : success(false) {}
  bool success :1;
} _ApacheService_fibonacci_result__isset;

class ApacheService_fibonacci_result {
 public:

  ApacheService_fibonacci_result(const ApacheService_fibonacci_result&) noexcept;
  ApacheService_fibonacci_result& operator=(const ApacheService_fibonacci_result&) noexcept;
  ApacheService_fibonacci_result() noexcept
                                 : success(0) {
  }

  virtual ~ApacheService_fibonacci_result() noexcept;
  int64_t success;

  _ApacheService_fibonacci_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const ApacheService_fibonacci_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ApacheService_fibonacci_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApacheService_fibonacci_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApacheService_fibonacci_presult__isset {
  _ApacheService_fibonacci_presult__isset() : success(false) {}
  bool success :1;
} _ApacheService_fibonacci_presult__isset;

class ApacheService_fibonacci_presult {
 public:


  virtual ~ApacheService_fibonacci_presult() noexcept;
  int64_t* success;

  _ApacheService_fibonacci_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApacheService_onlydigits_args__isset {
  _ApacheService_onlydigits_args__isset() : input(false) {}
  bool input :1;
} _ApacheService_onlydigits_args__isset;

class ApacheService_onlydigits_args {
 public:

  ApacheService_onlydigits_args(const ApacheService_onlydigits_args&);
  ApacheService_onlydigits_args& operator=(const ApacheService_onlydigits_args&);
  ApacheService_onlydigits_args() noexcept
                                : input() {
  }

  virtual ~ApacheService_onlydigits_args() noexcept;
  std::string input;

  _ApacheService_onlydigits_args__isset __isset;

  void __set_input(const std::string& val);

  bool operator == (const ApacheService_onlydigits_args & rhs) const
  {
    if (!(input == rhs.input))
      return false;
    return true;
  }
  bool operator != (const ApacheService_onlydigits_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApacheService_onlydigits_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApacheService_onlydigits_pargs {
 public:


  virtual ~ApacheService_onlydigits_pargs() noexcept;
  const std::string* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApacheService_onlydigits_result__isset {
  _ApacheService_onlydigits_result__isset() : success(false) {}
  bool success :1;
} _ApacheService_onlydigits_result__isset;

class ApacheService_onlydigits_result {
 public:

  ApacheService_onlydigits_result(const ApacheService_onlydigits_result&);
  ApacheService_onlydigits_result& operator=(const ApacheService_onlydigits_result&);
  ApacheService_onlydigits_result() noexcept
                                  : success() {
  }

  virtual ~ApacheService_onlydigits_result() noexcept;
  std::string success;

  _ApacheService_onlydigits_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const ApacheService_onlydigits_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ApacheService_onlydigits_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApacheService_onlydigits_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApacheService_onlydigits_presult__isset {
  _ApacheService_onlydigits_presult__isset() : success(false) {}
  bool success :1;
} _ApacheService_onlydigits_presult__isset;

class ApacheService_onlydigits_presult {
 public:


  virtual ~ApacheService_onlydigits_presult() noexcept;
  std::string* success;

  _ApacheService_onlydigits_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ApacheService_getuser_args__isset {
  _ApacheService_getuser_args__isset() : id(false) {}
  bool id :1;
} _ApacheService_getuser_args__isset;

class ApacheService_getuser_args {
 public:

  ApacheService_getuser_args(const ApacheService_getuser_args&) noexcept;
  ApacheService_getuser_args& operator=(const ApacheService_getuser_args&) noexcept;
  ApacheService_getuser_args() noexcept
                             : id(0) {
  }

  virtual ~ApacheService_getuser_args() noexcept;
  int32_t id;

  _ApacheService_getuser_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const ApacheService_getuser_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const ApacheService_getuser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApacheService_getuser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ApacheService_getuser_pargs {
 public:


  virtual ~ApacheService_getuser_pargs() noexcept;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApacheService_getuser_result__isset {
  _ApacheService_getuser_result__isset() : success(false) {}
  bool success :1;
} _ApacheService_getuser_result__isset;

class ApacheService_getuser_result {
 public:

  ApacheService_getuser_result(const ApacheService_getuser_result&);
  ApacheService_getuser_result& operator=(const ApacheService_getuser_result&);
  ApacheService_getuser_result() noexcept {
  }

  virtual ~ApacheService_getuser_result() noexcept;
  User success;

  _ApacheService_getuser_result__isset __isset;

  void __set_success(const User& val);

  bool operator == (const ApacheService_getuser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ApacheService_getuser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApacheService_getuser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ApacheService_getuser_presult__isset {
  _ApacheService_getuser_presult__isset() : success(false) {}
  bool success :1;
} _ApacheService_getuser_presult__isset;

class ApacheService_getuser_presult {
 public:


  virtual ~ApacheService_getuser_presult() noexcept;
  User* success;

  _ApacheService_getuser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ApacheServiceClient : virtual public ApacheServiceIf {
 public:
  ApacheServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ApacheServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t add(const AddRequest& request) override;
  void send_add(const AddRequest& request);
  int64_t recv_add();
  void printrandom() override;
  void send_printrandom();
  void recv_printrandom();
  int64_t fibonacci(const int64_t input) override;
  void send_fibonacci(const int64_t input);
  int64_t recv_fibonacci();
  void onlydigits(std::string& _return, const std::string& input) override;
  void send_onlydigits(const std::string& input);
  void recv_onlydigits(std::string& _return);
  void getuser(User& _return, const int32_t id) override;
  void send_getuser(const int32_t id);
  void recv_getuser(User& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ApacheServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ApacheServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (ApacheServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_printrandom(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fibonacci(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_onlydigits(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getuser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ApacheServiceProcessor(::std::shared_ptr<ApacheServiceIf> iface) :
    iface_(iface) {
    processMap_["add"] = &ApacheServiceProcessor::process_add;
    processMap_["printrandom"] = &ApacheServiceProcessor::process_printrandom;
    processMap_["fibonacci"] = &ApacheServiceProcessor::process_fibonacci;
    processMap_["onlydigits"] = &ApacheServiceProcessor::process_onlydigits;
    processMap_["getuser"] = &ApacheServiceProcessor::process_getuser;
  }

  virtual ~ApacheServiceProcessor() {}
};

class ApacheServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ApacheServiceProcessorFactory(const ::std::shared_ptr< ApacheServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< ApacheServiceIfFactory > handlerFactory_;
};

class ApacheServiceMultiface : virtual public ApacheServiceIf {
 public:
  ApacheServiceMultiface(std::vector<std::shared_ptr<ApacheServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ApacheServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<ApacheServiceIf> > ifaces_;
  ApacheServiceMultiface() {}
  void add(::std::shared_ptr<ApacheServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t add(const AddRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(request);
    }
    return ifaces_[i]->add(request);
  }

  void printrandom() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->printrandom();
    }
    ifaces_[i]->printrandom();
  }

  int64_t fibonacci(const int64_t input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fibonacci(input);
    }
    return ifaces_[i]->fibonacci(input);
  }

  void onlydigits(std::string& _return, const std::string& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->onlydigits(_return, input);
    }
    ifaces_[i]->onlydigits(_return, input);
    return;
  }

  void getuser(User& _return, const int32_t id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getuser(_return, id);
    }
    ifaces_[i]->getuser(_return, id);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ApacheServiceConcurrentClient : virtual public ApacheServiceIf {
 public:
  ApacheServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ApacheServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t add(const AddRequest& request) override;
  int32_t send_add(const AddRequest& request);
  int64_t recv_add(const int32_t seqid);
  void printrandom() override;
  int32_t send_printrandom();
  void recv_printrandom(const int32_t seqid);
  int64_t fibonacci(const int64_t input) override;
  int32_t send_fibonacci(const int64_t input);
  int64_t recv_fibonacci(const int32_t seqid);
  void onlydigits(std::string& _return, const std::string& input) override;
  int32_t send_onlydigits(const std::string& input);
  void recv_onlydigits(std::string& _return, const int32_t seqid);
  void getuser(User& _return, const int32_t id) override;
  int32_t send_getuser(const int32_t id);
  void recv_getuser(User& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
